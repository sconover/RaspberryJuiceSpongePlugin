Running the Sponge server

1) git clone all sponge code
git submodule update --init --recursive

2) open
  submodules/Sponge.iml
  submodules/SpongeCommon/SpongeCommon.iml
  submodules/SpongeCommon/SpongeAPI/SpongeAPI.iml

  as intellij modules

3) In the Intellij Gradle tab,
  a) run Sponge > forgeGradle > setupDecompWorkspace
  b) click the "Refresh all Gradle projects" icon

4) Create the top-level directory structure: "target/server-root"

5) Create a run target for
  class: GradleStartServer
  vmoptions: -Dfml.coreMods.load=org.spongepowered.mod.SpongeCoremod
  working dir: abosolute path of 'target/server-root'
  Use classpath of module: Sponge

6) Run this, it will fail to start because of eula.txt.
  Open target/server-root/eula.txt and follow the instructions.
  Run the server again. It should start successfully.


gpk site
  devs/admins
    code / contribution focused
    tutorials...
    aws howto...
    teaching materials
  students


=====================
old notes

- systems stuff
  - make a python script that does everything
    https://docs.python.org/2/library/argparse.html#sub-commands
  - separate repo
  - incremental jar updates...
    - compile and jar on server
      - deploy to a given instance
	- optionally use my own canarymod jar (build that too)
  - install new ipython...
  - from-scratch
    setup mc world, ipython, ports, etc
  - bake in aws assumption
  - run remotely

  - use graphite early?
    - yammer metrics reporting
	- any sort of "check" (status check, etc)

- full code audit.
  - metrics
  - robustness
    - e.g. CommandHandler. sensible errors.
	- errors are a key aspect of usability
	  - consider producing usage notes...make this part of the RPC annotation?
	  - tests for failure messages
  - block face problem
  - comments for everything - tests, prod code

thinking about class documentation
  google docs
  can i mail merge? (of course!)
    http://webapps.stackexchange.com/questions/40067/how-do-i-mail-merge-from-google-spreadsheet-to-a-google-document
	so, create a google spreadsheet with class info
	...and generate the server from the same spreadsheet (just copy-paste into local file on server - tsv or something)

- include guava in "main" pluing module...
  ...needs a pom.

- include yammer metrics, track core timings (dump hists to a log on some regular basis?)

- extract command methods and annotate
  - annotations that mark original / extended
  - api doc annotations
  - transform the annotations to api docs as part of the mvn package (put in the jar?)

- maven
  - run "mvn dependency:sources" to get dependency jar sources
- look into https://travis-ci.org/
- running canarymod as a config...
  net.canarymod.Main
  -Djava.awt.headless=true

  ...canarymod submodule?

  git submodule add git@github.com:sconover/CanaryMod.git submodules/CanaryMod

- integration test the mcpi stuff
  - iterate by running tests...and watching them run in-world
    ...reload the plugin on the fly?
    ...print the test name in chat
    ...print each command?
    shouldn't need to disconnect client
      ...need to use plugin reloading capability
      ...start server in background, reload plugin at the beginning of each test run
        small socket server that responds to a single command (reloadPlugin name)
          ...use all the plugin reloading capabilities (just avoid jars)
          print in-game
      only reload if the hash of the file contents is different (and, log either way)

  - slow them down or speed them up

  - later: examine the world files via NBT
    ...canonical AT's for any mcpi plugin?

- test game config - should be in creative mode and login timeout is huge

- ...in-game debugger...step through commands and watch what happens. control from console, in-game.